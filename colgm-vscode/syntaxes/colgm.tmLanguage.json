{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "colgm",
  "fileTypes": [
      "colgm"
  ],
  "scopeName": "source.colgm",
  "patterns": [
      {
          "comment": "boxed slice literal",
          "begin": "(<)(\\[)",
          "beginCaptures": {
              "1": {
                  "name": "punctuation.brackets.angle.colgm"
              },
              "2": {
                  "name": "punctuation.brackets.square.colgm"
              }
          },
          "end": ">",
          "endCaptures": {
              "0": {
                  "name": "punctuation.brackets.angle.colgm"
              }
          },
          "patterns": [
              {
                  "include": "#block-comments"
              },
              {
                  "include": "#comments"
              },
              {
                  "include": "#gtypes"
              },
              {
                  "include": "#lvariables"
              },
              {
                  "include": "#lifetimes"
              },
              {
                  "include": "#punctuation"
              },
              {
                  "include": "#types"
              }
          ]
      },
      {
          "comment": "macro type metavariables",
          "name": "meta.macro.metavariable.type.colgm",
          "match": "(\\$)((crate)|([A-Z]\\w*))(\\s*(:)\\s*(block|expr(?:_2021)?|ident|item|lifetime|literal|meta|pat(?:_param)?|path|stmt|tt|ty|vis)\\b)?",
          "captures": {
              "1": {
                  "name": "keyword.operator.macro.dollar.colgm"
              },
              "3": {
                  "name": "keyword.other.crate.colgm"
              },
              "4": {
                  "name": "entity.name.type.metavariable.colgm"
              },
              "6": {
                  "name": "keyword.operator.key-value.colgm"
              },
              "7": {
                  "name": "variable.other.metavariable.specifier.colgm"
              }
          },
          "patterns": [
              {
                  "include": "#keywords"
              }
          ]
      },
      {
          "comment": "macro metavariables",
          "name": "meta.macro.metavariable.colgm",
          "match": "(\\$)([a-z]\\w*)(\\s*(:)\\s*(block|expr(?:_2021)?|ident|item|lifetime|literal|meta|pat(?:_param)?|path|stmt|tt|ty|vis)\\b)?",
          "captures": {
              "1": {
                  "name": "keyword.operator.macro.dollar.colgm"
              },
              "2": {
                  "name": "variable.other.metavariable.name.colgm"
              },
              "4": {
                  "name": "keyword.operator.key-value.colgm"
              },
              "5": {
                  "name": "variable.other.metavariable.specifier.colgm"
              }
          },
          "patterns": [
              {
                  "include": "#keywords"
              }
          ]
      },
      {
          "comment": "macro rules",
          "name": "meta.macro.rules.colgm",
          "match": "\\b(macro_rules!)\\s+(([a-z0-9_]+)|([A-Z][a-z0-9_]*))\\s+(\\{)",
          "captures": {
              "1": {
                  "name": "entity.name.function.macro.rules.colgm"
              },
              "3": {
                  "name": "entity.name.function.macro.colgm"
              },
              "4": {
                  "name": "entity.name.type.macro.colgm"
              },
              "5": {
                  "name": "punctuation.brackets.curly.colgm"
              }
          }
      },
      {
          "comment": "modules",
          "match": "(mod)\\s+((?:r#(?!crate|[Ss]elf|super))?[a-z][A-Za-z0-9_]*)",
          "captures": {
              "1": {
                  "name": "storage.type.colgm"
              },
              "2": {
                  "name": "entity.name.module.colgm"
              }
          }
      },
      {
          "comment": "external crate imports",
          "name": "meta.import.colgm",
          "begin": "\\b(extern)\\s+(crate)",
          "beginCaptures": {
              "1": {
                  "name": "storage.type.colgm"
              },
              "2": {
                  "name": "keyword.other.crate.colgm"
              }
          },
          "end": ";",
          "endCaptures": {
              "0": {
                  "name": "punctuation.semi.colgm"
              }
          },
          "patterns": [
              {
                  "include": "#block-comments"
              },
              {
                  "include": "#comments"
              },
              {
                  "include": "#keywords"
              },
              {
                  "include": "#punctuation"
              }
          ]
      },
      {
          "comment": "use statements",
          "name": "meta.use.colgm",
          "begin": "\\b(use)\\s",
          "beginCaptures": {
              "1": {
                  "name": "keyword.other.colgm"
              }
          },
          "end": ";",
          "endCaptures": {
              "0": {
                  "name": "punctuation.semi.colgm"
              }
          },
          "patterns": [
              {
                  "include": "#block-comments"
              },
              {
                  "include": "#comments"
              },
              {
                  "include": "#keywords"
              },
              {
                  "include": "#namespaces"
              },
              {
                  "include": "#punctuation"
              },
              {
                  "include": "#types"
              },
              {
                  "include": "#lvariables"
              }
          ]
      },
      {
          "include": "#block-comments"
      },
      {
          "include": "#comments"
      },
      {
          "include": "#attributes"
      },
      {
          "include": "#lvariables"
      },
      {
          "include": "#constants"
      },
      {
          "include": "#gtypes"
      },
      {
          "include": "#functions"
      },
      {
          "include": "#types"
      },
      {
          "include": "#keywords"
      },
      {
          "include": "#lifetimes"
      },
      {
          "include": "#macros"
      },
      {
          "include": "#namespaces"
      },
      {
          "include": "#punctuation"
      },
      {
          "include": "#strings"
      },
      {
          "include": "#variables"
      }
  ],
  "repository": {
      "comments": {
          "patterns": [
              {
                  "comment": "documentation comments",
                  "name": "comment.line.documentation.colgm",
                  "match": "(///).*$",
                  "captures": {
                      "1": {
                          "name": "punctuation.definition.comment.colgm"
                      }
                  }
              },
              {
                  "comment": "line comments",
                  "name": "comment.line.double-slash.colgm",
                  "match": "(//).*$",
                  "captures": {
                      "1": {
                          "name": "punctuation.definition.comment.colgm"
                      }
                  }
              }
          ]
      },
      "block-comments": {
          "patterns": [
              {
                  "comment": "empty block comments",
                  "name": "comment.block.colgm",
                  "match": "/\\*\\*/"
              },
              {
                  "comment": "block documentation comments",
                  "name": "comment.block.documentation.colgm",
                  "begin": "/\\*\\*",
                  "end": "\\*/",
                  "patterns": [
                      {
                          "include": "#block-comments"
                      }
                  ]
              },
              {
                  "comment": "block comments",
                  "name": "comment.block.colgm",
                  "begin": "/\\*(?!\\*)",
                  "end": "\\*/",
                  "patterns": [
                      {
                          "include": "#block-comments"
                      }
                  ]
              }
          ]
      },
      "constants": {
          "patterns": [
              {
                  "comment": "ALL CAPS constants",
                  "name": "constant.other.caps.colgm",
                  "match": "\\b[A-Z]{2}[A-Z0-9_]*\\b"
              },
              {
                  "comment": "constant declarations",
                  "match": "\\b(const)\\s+([A-Z][A-Za-z0-9_]*)\\b",
                  "captures": {
                      "1": {
                          "name": "storage.type.colgm"
                      },
                      "2": {
                          "name": "constant.other.caps.colgm"
                      }
                  }
              },
              {
                  "comment": "decimal integers and floats",
                  "name": "constant.numeric.decimal.colgm",
                  "match": "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E|e)([+-]?)([\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                  "captures": {
                      "1": {
                          "name": "punctuation.separator.dot.decimal.colgm"
                      },
                      "2": {
                          "name": "keyword.operator.exponent.colgm"
                      },
                      "3": {
                          "name": "keyword.operator.exponent.sign.colgm"
                      },
                      "4": {
                          "name": "constant.numeric.decimal.exponent.mantissa.colgm"
                      },
                      "5": {
                          "name": "entity.name.type.numeric.colgm"
                      }
                  }
              },
              {
                  "comment": "hexadecimal integers",
                  "name": "constant.numeric.hex.colgm",
                  "match": "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                  "captures": {
                      "1": {
                          "name": "entity.name.type.numeric.colgm"
                      }
                  }
              },
              {
                  "comment": "octal integers",
                  "name": "constant.numeric.oct.colgm",
                  "match": "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                  "captures": {
                      "1": {
                          "name": "entity.name.type.numeric.colgm"
                      }
                  }
              },
              {
                  "comment": "binary integers",
                  "name": "constant.numeric.bin.colgm",
                  "match": "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
                  "captures": {
                      "1": {
                          "name": "entity.name.type.numeric.colgm"
                      }
                  }
              },
              {
                  "comment": "booleans",
                  "name": "constant.language.bool.colgm",
                  "match": "\\b(true|false)\\b"
              }
          ]
      },
      "escapes": {
          "comment": "escapes: ASCII, byte, Unicode, quote, regex",
          "name": "constant.character.escape.colgm",
          "match": "(\\\\)(?:(?:(x[0-7][\\da-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
          "captures": {
              "1": {
                  "name": "constant.character.escape.backslash.colgm"
              },
              "2": {
                  "name": "constant.character.escape.bit.colgm"
              },
              "3": {
                  "name": "constant.character.escape.unicode.colgm"
              },
              "4": {
                  "name": "constant.character.escape.unicode.punctuation.colgm"
              },
              "5": {
                  "name": "constant.character.escape.unicode.punctuation.colgm"
              }
          }
      },
      "attributes": {
          "comment": "attributes",
          "name": "meta.attribute.colgm",
          "begin": "(#)(\\!?)(\\[)",
          "beginCaptures": {
              "1": {
                  "name": "punctuation.definition.attribute.colgm"
              },
              "3": {
                  "name": "punctuation.brackets.attribute.colgm"
              }
          },
          "end": "\\]",
          "endCaptures": {
              "0": {
                  "name": "punctuation.brackets.attribute.colgm"
              }
          },
          "patterns": [
              {
                  "include": "#block-comments"
              },
              {
                  "include": "#comments"
              },
              {
                  "include": "#keywords"
              },
              {
                  "include": "#lifetimes"
              },
              {
                  "include": "#punctuation"
              },
              {
                  "include": "#strings"
              },
              {
                  "include": "#gtypes"
              },
              {
                  "include": "#types"
              }
          ]
      },
      "functions": {
          "patterns": [
              {
                  "comment": "pub as a function",
                  "match": "\\b(pub)(\\()",
                  "captures": {
                      "1": {
                          "name": "keyword.other.colgm"
                      },
                      "2": {
                          "name": "punctuation.brackets.round.colgm"
                      }
                  }
              },
              {
                  "comment": "function definition",
                  "name": "meta.function.definition.colgm",
                  "begin": "\\b(func)\\s+((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)((\\()|(<))",
                  "beginCaptures": {
                      "1": {
                          "name": "keyword.other.func.colgm"
                      },
                      "2": {
                          "name": "entity.name.function.colgm"
                      },
                      "4": {
                          "name": "punctuation.brackets.round.colgm"
                      },
                      "5": {
                          "name": "punctuation.brackets.angle.colgm"
                      }
                  },
                  "end": "(\\{)|(;)",
                  "endCaptures": {
                      "1": {
                          "name": "punctuation.brackets.curly.colgm"
                      },
                      "2": {
                          "name": "punctuation.semi.colgm"
                      }
                  },
                  "patterns": [
                      {
                          "include": "#block-comments"
                      },
                      {
                          "include": "#comments"
                      },
                      {
                          "include": "#keywords"
                      },
                      {
                          "include": "#lvariables"
                      },
                      {
                          "include": "#constants"
                      },
                      {
                          "include": "#gtypes"
                      },
                      {
                          "include": "#functions"
                      },
                      {
                          "include": "#lifetimes"
                      },
                      {
                          "include": "#macros"
                      },
                      {
                          "include": "#namespaces"
                      },
                      {
                          "include": "#punctuation"
                      },
                      {
                          "include": "#strings"
                      },
                      {
                          "include": "#types"
                      },
                      {
                          "include": "#variables"
                      }
                  ]
              },
              {
                  "comment": "function/method calls, chaining",
                  "name": "meta.function.call.colgm",
                  "begin": "((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(\\()",
                  "beginCaptures": {
                      "1": {
                          "name": "entity.name.function.colgm"
                      },
                      "2": {
                          "name": "punctuation.brackets.round.colgm"
                      }
                  },
                  "end": "\\)",
                  "endCaptures": {
                      "0": {
                          "name": "punctuation.brackets.round.colgm"
                      }
                  },
                  "patterns": [
                      {
                          "include": "#block-comments"
                      },
                      {
                          "include": "#comments"
                      },
                      {
                          "include": "#attributes"
                      },
                      {
                          "include": "#keywords"
                      },
                      {
                          "include": "#lvariables"
                      },
                      {
                          "include": "#constants"
                      },
                      {
                          "include": "#gtypes"
                      },
                      {
                          "include": "#functions"
                      },
                      {
                          "include": "#lifetimes"
                      },
                      {
                          "include": "#macros"
                      },
                      {
                          "include": "#namespaces"
                      },
                      {
                          "include": "#punctuation"
                      },
                      {
                          "include": "#strings"
                      },
                      {
                          "include": "#types"
                      },
                      {
                          "include": "#variables"
                      }
                  ]
              },
              {
                  "comment": "function/method calls with turbofish",
                  "name": "meta.function.call.colgm",
                  "begin": "((?:r#(?!crate|[Ss]elf|super))?[A-Za-z0-9_]+)(?=::<.*>\\()",
                  "beginCaptures": {
                      "1": {
                          "name": "entity.name.function.colgm"
                      }
                  },
                  "end": "\\)",
                  "endCaptures": {
                      "0": {
                          "name": "punctuation.brackets.round.colgm"
                      }
                  },
                  "patterns": [
                      {
                          "include": "#block-comments"
                      },
                      {
                          "include": "#comments"
                      },
                      {
                          "include": "#attributes"
                      },
                      {
                          "include": "#keywords"
                      },
                      {
                          "include": "#lvariables"
                      },
                      {
                          "include": "#constants"
                      },
                      {
                          "include": "#gtypes"
                      },
                      {
                          "include": "#functions"
                      },
                      {
                          "include": "#lifetimes"
                      },
                      {
                          "include": "#macros"
                      },
                      {
                          "include": "#namespaces"
                      },
                      {
                          "include": "#punctuation"
                      },
                      {
                          "include": "#strings"
                      },
                      {
                          "include": "#types"
                      },
                      {
                          "include": "#variables"
                      }
                  ]
              }
          ]
      },
      "keywords": {
          "patterns": [
              {
                  "comment": "control flow keywords",
                  "name": "keyword.control.colgm",
                  "match": "\\b(await|break|continue|do|else|elsif|for|foreach|forindex|defer|if|loop|match|return|try|while|yield)\\b"
              },
              {
                  "comment": "storage keywords",
                  "name": "keyword.other.colgm storage.type.colgm",
                  "match": "\\b(extern|let|macro|mod|var)\\b"
              },
              {
                  "comment": "const keyword",
                  "name": "storage.modifier.colgm",
                  "match": "\\b(const)\\b"
              },
              {
                  "comment": "type keyword",
                  "name": "keyword.declaration.type.colgm storage.type.colgm",
                  "match": "\\b(type)\\b"
              },
              {
                  "comment": "enum keyword",
                  "name": "keyword.declaration.enum.colgm storage.type.colgm",
                  "match": "\\b(enum)\\b"
              },
              {
                  "comment": "trait keyword",
                  "name": "keyword.declaration.trait.colgm storage.type.colgm",
                  "match": "\\b(trait)\\b"
              },
              {
                  "comment": "struct keyword",
                  "name": "keyword.declaration.struct.colgm storage.type.colgm",
                  "match": "\\b(struct)\\b"
              },
              {
                  "comment": "storage modifiers",
                  "name": "storage.modifier.colgm",
                  "match": "\\b(abstract|static)\\b"
              },
              {
                  "comment": "other keywords",
                  "name": "keyword.other.colgm",
                  "match": "\\b(impl|pub|union|unsafe|use|and|or)\\b"
              },
              {
                  "comment": "func",
                  "name": "keyword.other.func.colgm",
                  "match": "\\bfunc\\b"
              },
              {
                  "comment": "crate",
                  "name": "keyword.other.crate.colgm",
                  "match": "\\bcrate\\b"
              },
              {
                  "comment": "mut",
                  "name": "storage.modifier.mut.colgm",
                  "match": "\\bmut\\b"
              },
              {
                  "comment": "logical operators",
                  "name": "keyword.operator.logical.colgm",
                  "match": "(\\^|\\||\\|\\||&&|<<|>>|!)(?!=)"
              },
              {
                  "comment": "logical AND, borrow references",
                  "name": "keyword.operator.borrow.and.colgm",
                  "match": "&(?![&=])"
              },
              {
                  "comment": "assignment operators",
                  "name": "keyword.operator.assignment.colgm",
                  "match": "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)"
              },
              {
                  "comment": "single equal",
                  "name": "keyword.operator.assignment.equal.colgm",
                  "match": "(?<![<>])=(?!=|>)"
              },
              {
                  "comment": "comparison operators",
                  "name": "keyword.operator.comparison.colgm",
                  "match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
              },
              {
                  "comment": "math operators",
                  "name": "keyword.operator.math.colgm",
                  "match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
              },
              {
                  "comment": "less than, greater than (special case)",
                  "match": "(?:\\b|(?:(\\))|(\\])|(\\})))[ \\t]+([<>])[ \\t]+(?:\\b|(?:(\\()|(\\[)|(\\{)))",
                  "captures": {
                      "1": {
                          "name": "punctuation.brackets.round.colgm"
                      },
                      "2": {
                          "name": "punctuation.brackets.square.colgm"
                      },
                      "3": {
                          "name": "punctuation.brackets.curly.colgm"
                      },
                      "4": {
                          "name": "keyword.operator.comparison.colgm"
                      },
                      "5": {
                          "name": "punctuation.brackets.round.colgm"
                      },
                      "6": {
                          "name": "punctuation.brackets.square.colgm"
                      },
                      "7": {
                          "name": "punctuation.brackets.curly.colgm"
                      }
                  }
              },
              {
                  "comment": "namespace operator",
                  "name": "keyword.operator.namespace.colgm",
                  "match": "::"
              },
              {
                  "comment": "dereference asterisk",
                  "match": "(\\*)(?=\\w+)",
                  "captures": {
                      "1": {
                          "name": "keyword.operator.dereference.colgm"
                      }
                  }
              },
              {
                  "comment": "subpattern binding",
                  "name": "keyword.operator.subpattern.colgm",
                  "match": "@"
              },
              {
                  "comment": "dot access",
                  "name": "keyword.operator.access.dot.colgm",
                  "match": "\\.(?!\\.)"
              },
              {
                  "comment": "ranges, range patterns",
                  "name": "keyword.operator.range.colgm",
                  "match": "\\.{2}(=|\\.)?"
              },
              {
                  "comment": "colon",
                  "name": "keyword.operator.key-value.colgm",
                  "match": ":(?!:)"
              },
              {
                  "comment": "dashrocket, skinny arrow",
                  "name": "keyword.operator.arrow.skinny.colgm",
                  "match": "->|<-"
              },
              {
                  "comment": "hashrocket, fat arrow",
                  "name": "keyword.operator.arrow.fat.colgm",
                  "match": "=>"
              },
              {
                  "comment": "dollar macros",
                  "name": "keyword.operator.macro.dollar.colgm",
                  "match": "\\$"
              },
              {
                  "comment": "question mark operator, questionably sized, macro kleene matcher",
                  "name": "keyword.operator.question.colgm",
                  "match": "\\?"
              }
          ]
      },
      "interpolations": {
          "comment": "curly brace interpolations",
          "name": "meta.interpolation.colgm",
          "match": "({)[^\"{}]*(})",
          "captures": {
              "1": {
                  "name": "punctuation.definition.interpolation.colgm"
              },
              "2": {
                  "name": "punctuation.definition.interpolation.colgm"
              }
          }
      },
      "lifetimes": {
          "patterns": [
              {
                  "comment": "named lifetime parameters",
                  "match": "(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\b",
                  "captures": {
                      "1": {
                          "name": "punctuation.definition.lifetime.colgm"
                      },
                      "2": {
                          "name": "entity.name.type.lifetime.colgm"
                      }
                  }
              },
              {
                  "comment": "borrowing references to named lifetimes",
                  "match": "(\\&)(['])([a-zA-Z_][0-9a-zA-Z_]*)(?!['])\\b",
                  "captures": {
                      "1": {
                          "name": "keyword.operator.borrow.colgm"
                      },
                      "2": {
                          "name": "punctuation.definition.lifetime.colgm"
                      },
                      "3": {
                          "name": "entity.name.type.lifetime.colgm"
                      }
                  }
              }
          ]
      },
      "macros": {
          "patterns": [
              {
                  "comment": "macros",
                  "name": "meta.macro.colgm",
                  "match": "(([a-z_][A-Za-z0-9_]*!)|([A-Z_][A-Za-z0-9_]*!))",
                  "captures": {
                      "2": {
                          "name": "entity.name.function.macro.colgm"
                      },
                      "3": {
                          "name": "entity.name.type.macro.colgm"
                      }
                  }
              }
          ]
      },
      "namespaces": {
          "patterns": [
              {
                  "comment": "namespace (non-type, non-function path segment)",
                  "match": "(?<![A-Za-z0-9_])([A-Za-z0-9_]+)((?<!super|self)::)",
                  "captures": {
                      "1": {
                          "name": "entity.name.namespace.colgm"
                      },
                      "2": {
                          "name": "keyword.operator.namespace.colgm"
                      }
                  }
              }
          ]
      },
      "types": {
          "patterns": [
              {
                  "comment": "numeric types",
                  "match": "(?<![A-Za-z])(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)\\b",
                  "captures": {
                      "1": {
                          "name": "entity.name.type.numeric.colgm"
                      }
                  }
              },
              {
                  "comment": "parameterized types",
                  "begin": "\\b(_?[A-Z][A-Za-z0-9_]*)(<)",
                  "beginCaptures": {
                      "1": {
                          "name": "entity.name.type.colgm"
                      },
                      "2": {
                          "name": "punctuation.brackets.angle.colgm"
                      }
                  },
                  "end": ">",
                  "endCaptures": {
                      "0": {
                          "name": "punctuation.brackets.angle.colgm"
                      }
                  },
                  "patterns": [
                      {
                          "include": "#block-comments"
                      },
                      {
                          "include": "#comments"
                      },
                      {
                          "include": "#keywords"
                      },
                      {
                          "include": "#lvariables"
                      },
                      {
                          "include": "#lifetimes"
                      },
                      {
                          "include": "#punctuation"
                      },
                      {
                          "include": "#types"
                      },
                      {
                          "include": "#variables"
                      }
                  ]
              },
              {
                  "comment": "primitive types",
                  "name": "entity.name.type.primitive.colgm",
                  "match": "\\b(bool|char|str)\\b"
              },
              {
                  "comment": "trait declarations",
                  "match": "\\b(trait)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
                  "captures": {
                      "1": {
                          "name": "keyword.declaration.trait.colgm storage.type.colgm"
                      },
                      "2": {
                          "name": "entity.name.type.trait.colgm"
                      }
                  }
              },
              {
                  "comment": "struct declarations",
                  "match": "\\b(struct)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
                  "captures": {
                      "1": {
                          "name": "keyword.declaration.struct.colgm storage.type.colgm"
                      },
                      "2": {
                          "name": "entity.name.type.struct.colgm"
                      }
                  }
              },
              {
                  "comment": "enum declarations",
                  "match": "\\b(enum)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
                  "captures": {
                      "1": {
                          "name": "keyword.declaration.enum.colgm storage.type.colgm"
                      },
                      "2": {
                          "name": "entity.name.type.enum.colgm"
                      }
                  }
              },
              {
                  "comment": "type declarations",
                  "match": "\\b(type)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
                  "captures": {
                      "1": {
                          "name": "keyword.declaration.type.colgm storage.type.colgm"
                      },
                      "2": {
                          "name": "entity.name.type.declaration.colgm"
                      }
                  }
              },
              {
                  "comment": "types",
                  "name": "entity.name.type.colgm",
                  "match": "\\b_?[A-Z][A-Za-z0-9_]*\\b(?!!)"
              }
          ]
      },
      "gtypes": {
          "patterns": [
              {
                  "comment": "option types",
                  "name": "entity.name.type.option.colgm",
                  "match": "\\b(Some|None)\\b"
              },
              {
                  "comment": "result types",
                  "name": "entity.name.type.result.colgm",
                  "match": "\\b(Ok|Err)\\b"
              }
          ]
      },
      "punctuation": {
          "patterns": [
              {
                  "comment": "comma",
                  "name": "punctuation.comma.colgm",
                  "match": ","
              },
              {
                  "comment": "curly braces",
                  "name": "punctuation.brackets.curly.colgm",
                  "match": "[{}]"
              },
              {
                  "comment": "parentheses, round brackets",
                  "name": "punctuation.brackets.round.colgm",
                  "match": "[()]"
              },
              {
                  "comment": "semicolon",
                  "name": "punctuation.semi.colgm",
                  "match": ";"
              },
              {
                  "comment": "square brackets",
                  "name": "punctuation.brackets.square.colgm",
                  "match": "[\\[\\]]"
              },
              {
                  "comment": "angle brackets",
                  "name": "punctuation.brackets.angle.colgm",
                  "match": "(?<!=)[<>]"
              }
          ]
      },
      "strings": {
          "patterns": [
              {
                  "comment": "double-quoted strings and byte strings",
                  "name": "string.quoted.double.colgm",
                  "begin": "(b?)(\")",
                  "beginCaptures": {
                      "1": {
                          "name": "string.quoted.byte.raw.colgm"
                      },
                      "2": {
                          "name": "punctuation.definition.string.colgm"
                      }
                  },
                  "end": "\"",
                  "endCaptures": {
                      "0": {
                          "name": "punctuation.definition.string.colgm"
                      }
                  },
                  "patterns": [
                      {
                          "include": "#escapes"
                      },
                      {
                          "include": "#interpolations"
                      }
                  ]
              },
              {
                  "comment": "double-quoted raw strings and raw byte strings",
                  "name": "string.quoted.double.colgm",
                  "begin": "(b?r)(#*)(\")",
                  "beginCaptures": {
                      "1": {
                          "name": "string.quoted.byte.raw.colgm"
                      },
                      "2": {
                          "name": "punctuation.definition.string.raw.colgm"
                      },
                      "3": {
                          "name": "punctuation.definition.string.colgm"
                      }
                  },
                  "end": "(\")(\\2)",
                  "endCaptures": {
                      "1": {
                          "name": "punctuation.definition.string.colgm"
                      },
                      "2": {
                          "name": "punctuation.definition.string.raw.colgm"
                      }
                  }
              },
              {
                  "comment": "characters and bytes",
                  "name": "string.quoted.single.char.colgm",
                  "begin": "(b)?(')",
                  "beginCaptures": {
                      "1": {
                          "name": "string.quoted.byte.raw.colgm"
                      },
                      "2": {
                          "name": "punctuation.definition.char.colgm"
                      }
                  },
                  "end": "'",
                  "endCaptures": {
                      "0": {
                          "name": "punctuation.definition.char.colgm"
                      }
                  },
                  "patterns": [
                      {
                          "include": "#escapes"
                      }
                  ]
              }
          ]
      },
      "lvariables": {
          "patterns": [
              {
                  "comment": "self",
                  "name": "variable.language.self.colgm",
                  "match": "\\b[Ss]elf\\b"
              },
              {
                  "comment": "super",
                  "name": "variable.language.super.colgm",
                  "match": "\\bsuper\\b"
              }
          ]
      },
      "variables": {
          "patterns": [
              {
                  "comment": "variables",
                  "name": "variable.other.colgm",
                  "match": "\\b(?:r#(?!(crate|[Ss]elf|super)))?[a-z0-9_]+\\b"
              }
          ]
      }
  }
}